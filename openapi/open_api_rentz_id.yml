openapi: '3.0.2'
info:
  title: Rentz.id
  description: Alterra Academy Project TEAM 2
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Alta_Be_4/Rentz.id/1.0.1
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/altabe4/Rentz.id/1.0.1
    variables:
      environment: 
        default: dev
        enum:
          - "prod"
          - "dev"
tags:
  - name: Auth
    description: Authentication
  - name: Users
    description: User control
  - name: Product
    description: Rental data management
  - name: Booking
    description: Booking data management
  - name: Check Out
    description: Checkout data management
  - name: Cart
    description: Cart data management
paths:
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData:
                description: "Example data user"
                value: {
                  email: "alta@alterra.id",
                  password: "inipassword"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLoginSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Login Successs",
                    data: {
                      id: 1,
                      nama: alta,
                      email: alta@alterra.com,
                      phone: 08123456789,
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "email or password cannot be empty"
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Email must contain email format"
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Email or Password Invalid"
                  }
  ####################################
  #  USERS
  ####################################
  /users:
    post:
      tags:
        - Users
      summary: register
      description: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUserData'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  nama: "Alta",
                  email: "alta@alterra.id",
                  password: "inipassword",
                  phone: "08123456789",
                  address: "malang, jawa timur"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Success Register",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "password cannot less than 5 character"
                  }
                responsedata2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "name cannot be empty"
                  }
                responsedata3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "email cannot be empty"
                  }
                responsedata4:
                  description: response failed 4
                  value: {
                    code: 400,
                    message: "email or Phone Number is Exist"
                  }
                responsedata5:
                  description: response failed 5
                  value: {
                    code: 400,
                    message: "email must contain email format"
                  }
                responsedata6:
                  description: response failed 6
                  value: {
                    code: 400,
                    message: "password cannot be empty"
                  }
                responsedata7:
                  description: response failed 7
                  value: {
                    code: 400,
                    message: "phone number cannot be empty"
                  }
                responsedata8:
                  description: response failed 8
                  value: {
                    code: 400,
                    message: "Bad Request"
                  }
    get:
      tags:
        - Users
      description: Get User by JWT
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                    data: {
                      id: 1,
                      nama: alta,
                      email: alta@alterra.com,
                      phone: 08123456789,
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request"
                  }
    put:
      tags:
        - Users
      description: Edit user profile
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alterra Academy
                email:
                  type: string
                  example: alta@gmail.com
                password:
                  type: string
                  example: inipasswordbaru
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request"
                  }
    delete:
      tags:
        - Users
      description: Delete User by ID
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request"
                  }
  ####################################
  #  PRODUCT
  ####################################
  /products:
    post:
      tags:
        - Product
      description: Create new product
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Playstation 5
                sub_category:
                  type: string
                  example: playstation
                city_id:
                  type: integer
                  example: 3303
                price:
                  type: integer
                  example: 250000
                guarantee:
                  type: array
                  items:
                    type: integer
                    example: [1,2,3]
                description:
                  type: string
                  example: sewa ps5 gratis
                stock:
                  type: integer
                  example: 9
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "product created and file uploaded successfully",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "must add product name",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Price must be more than 0",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Must add description",
                  }
                responseData4:
                  description: response failed 4
                  value: {
                    code: 400,
                    message: "Stock must be more than 0",
                  }
                responseData5:
                  description: response failed 5
                  value: {
                    code: 400,
                    message: "The uploaded image is too big. Please use an image less than 1MB in size",
                  }
                responseData6:
                  description: response failed 6
                  value: {
                    code: 400,
                    message: "The provided file format is not allowed. Please upload a JPG or JPEG or PNG image",
                  }
    get:
      tags:
        - Product
      description: Get all product
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseProductData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                    data: {
                      id: 1,
                      usersid: 1,
                      name: Playstation 5,
                      subcategory_name: Lain-lain,
                      subcategory_id: 207,
                      city_id: 3303,
                      city_name: KABUPATEN PURBALINGGA,
                      price: 250000,
                      description: sewa ps5 gratis,
                      stock: 9,
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "items not found",
                  }
  /products/{id}:
    get:
      tags:
        - Product
      description: Search product by id
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseProductData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                    data: {
                      id: 1,
                      usersid: 1,
                      created_at: 2021-12-24T17:43:54.199Z,
                      nama: Fafa Ganskuy,
                      phone_number: 08123456789,
                      name: Playstation 5,
                      subcategory_id: 207,
                      subcategory_name: Lain-lain,
                      city_id: 3303,
                      city_name: KABUPATEN PURBALINGGA,
                      price: 250000,
                      description: sewa ps5 gratis,
                      stock: 9,
                      longitude: 107.6191228,
                      latitude: -6.9174639,
                      url: https://storage.googleapis.com/rentz-id/Logo%20Rentz%20besar.png,
                      guarantee: SIM
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "items not found",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "False Param",
                  }
    put:
      tags:
        - Product
      description: Update product by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                harga:
                  type: number
                  example: 225000
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "False Param",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Access Forbidden",
                  }
    delete:
      tags:
        - Product
      description: Delete product by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "False Param",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Access Forbidden",
                  }
  /products/subcategory/{id}:
    get:
      tags:
        - Product
      description: Search subproduct by id
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseProductData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                    data: {
                      id: 1,
                      usersid: 1,
                      name: Playstation 5,
                      subcategory_name: Lain-lain,
                      subcategory_id: 207,
                      city_id: 3303,
                      city_name: KABUPATEN PURBALINGGA,
                      price: 250000,
                      description: sewa ps5 gratis,
                      stock: 9,
                      url: https://storage.googleapis.com/rentz-id/Logo%20Rentz%20besar.png,
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "items not found",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "False Param",
                  }
  ####################################
  #  BOOKING
  ####################################
  /booking:
    post:
      tags:
        - Booking
      description: Create new booking
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  example: 1
                check_in:
                  type: string
                  example: 2022/01/20
                check_out:
                  type: string
                  example: 2022/01/24
                qty:
                  type: integer
                  example: 2
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    idbook: {
                      id: 1,
                      productsid: 1,
                      name: playstation 5,
                      price: 100000,
                      photos: https://storage.googleapis.com/rentz-id/download.jpg,
                      time_in: 2022-01-20T00:00:00Z,
                      time_out: 2022-01-24T00:00:00Z,
                      total_day: 4,
                      qty: 1,
                      total: 400000,
                      status_payment: waiting,
                      productownerid: 1,
                      nama: nama pemilik,
                      phone_number: 08123456789
                    },
                    message: "Success create new booking",
                    status: success
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Cannot booking own products",
                  }
  /booking/{id}:
    get:
      tags:
        - Booking
      description: Search booking by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseBookingData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                    data: {
                      id: 1,
                      productsid: 1,
                      name: playstation 5,
                      price: 100000,
                      photos: https://storage.googleapis.com/rentz-id/download.jpg,
                      time_in: 2022-01-20T00:00:00Z,
                      time_out: 2022-01-24T00:00:00Z,
                      total_day: 4,
                      qty: 1,
                      total: 400000,
                      status_payment: waiting,
                      productownerid: 1,
                      nama: nama pemilik,
                      phone_number: 08123456789
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "False Param",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Access Forbidden",
                  }
    delete:
      tags:
        - Booking
      description: Delete booking by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id product
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseBookingData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Successful Operation",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "False Param",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "Access Forbidden",
                  }
  /booking/check/{id}:
    get:
      tags:
        - Booking
      description: Search room by id
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id room
          in: path
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time_in:
                  type: string
                  example: 2021/12/03
                time_out:
                  type: string
                  example: 2021/12/05
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseBookingData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Item Available",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Product not available",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData3:
                  description: response failed 3
                  value: {
                    code: 400,
                    message: "False Param",
                  }
  /history:
    get:
      tags:
        - Booking
      description: Get all history
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseBookingData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    data: {
                      ID: 134,
                      ProductsID: 59,
                      Name: sepeda ku ada 6,
                      Price: 100000,
                      Photos: https://storage.googleapis.com/rentz-id/download.jpg,
                      Time_In: 2022-01-25T00:00:00Z,
                      Time_Out: 2022-01-26T00:00:00Z,
                      Total_Day: 1,
                      Qty: 1,
                      Total: 100000,
                      Status_Payment: success,
                      ProductOwnerID: 1,
                      Nama: nama pemilik,
                      Phone_Number: 08123456789,
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Booking not found",
                  }
  ####################################
  #  CHECK OUT
  ####################################
  /checkout:
    post:
      tags:
        - Check Out
      description: Check out booking
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking_id:
                  type: integer
                  example: 1,2
                checkout_method:
                  type: string
                  example: ID_DANA
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    checkout_id: 1,
                    message: "Your checkout success",
                    payment: {
                      id: ewc_66c5eb91-d1bd-4cf8-83ff-325a0b8c3849,
                      bussiness_id: 61ac440d22dded470452f27e,
                      reference_id: 59,
                      status: PENDING,
                      currency: IDR,
                      charge_amount: 400000,
                      capture_amount: 400000,
                      checkout_method: ONE_TIME_PAYMENT,
                      channel_properties: {
                        success_redirect_url: https://rentzid-f00f3.web.app/keranjang
                      },
                      actions: {
                        desktop_web_checkout_url: "https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=1bf55c28-4ac0-4292-839f-0a3fdd2069e6",
                        mobile_deeplink_checkout_url: "",
                        mobile_web_checkout_url: "https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=1bf55c28-4ac0-4292-839f-0a3fdd2069e6",
                        qr_checkout_string: ""
                      },
                      is_redirect_required: true,
                      callback_url: "http://imrenagi.com",
                      created: "2021-12-27T15:30:31.38772Z",
                      updated: "2021-12-27T15:30:31.38772Z",
                      capture_now: true,
                      metadata: {
                        branch_area: "PLUIT",
                        branch_city: "JAKARTA"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Your booking already paid",
                    status: failed,
                  }
  /checkout/ovo:
    post:
      tags:
        - Check Out
      description: Check out booking
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking_id:
                  type: integer
                  example: 1,2
                phone:
                  type: string
                  example: +628123456789
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    checkout_id: 1,
                    message: "Your checkout success",
                    payment: {
                      id: ewc_66c5eb91-d1bd-4cf8-83ff-325a0b8c3849,
                      bussiness_id: 61ac440d22dded470452f27e,
                      reference_id: 59,
                      status: PENDING,
                      currency: IDR,
                      charge_amount: 400000,
                      capture_amount: 400000,
                      checkout_method: ONE_TIME_PAYMENT,
                      channel_code: ID_OVO,
                      channel_properties: {
                        mobile_number: +628123456789
                      },
                      actions: {
                        desktop_web_checkout_url: "https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=1bf55c28-4ac0-4292-839f-0a3fdd2069e6",
                        mobile_deeplink_checkout_url: "",
                        mobile_web_checkout_url: "https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=1bf55c28-4ac0-4292-839f-0a3fdd2069e6",
                        qr_checkout_string: ""
                      },
                      is_redirect_required: true,
                      callback_url: "http://imrenagi.com",
                      created: "2021-12-27T15:30:31.38772Z",
                      updated: "2021-12-27T15:30:31.38772Z",
                      capture_now: true,
                      metadata: {
                        branch_area: "PLUIT",
                        branch_city: "JAKARTA"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Your booking already paid",
                    status: failed,
                  }
  ####################################
  #  CHECK OUT
  ####################################
  /cart:
    get:
      tags:
        - Cart
      description: Get all cart
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseBookingData'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    message: "Item Available",
                    data: {
                      ID: 134,
                      ProductsID: 59,
                      Name: sepeda ku ada 6,
                      Price: 100000,
                      Photos: https://storage.googleapis.com/rentz-id/download.jpg,
                      Time_In: 2022-01-25T00:00:00Z,
                      Time_Out: 2022-01-26T00:00:00Z,
                      Total_Day: 1,
                      Qty: 1,
                      Total: 100000,
                      Status_Payment: waiting,
                      ProductOwnerID: 1,
                      Nama: nama pemilik,
                      Phone_Number: 08123456789,
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    message: "Bad request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    message: "Booking not found",
                  }
#==================================#
#    COMPONENT
#==================================#
components:

  #==================================#    
  #    JWT
  #==================================#
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  #==================================#
  #    SCHEMAS
  #==================================#
  schemas:
  #    Login
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
  #    Login Success
    responseLoginSuccess:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }
  #    Register
    registerUserData:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "phone":
          type: string
          minLength: 1
  #==================================#
  #    USERS
  #==================================#
  #    Get User
    responseUserData:
      type: object
      properties:
        "id":
          type: number
          minLength: 1
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "phone":
          type: string
          minLength: 1
        "token":
          type: string
          minLength: 1
  #==================================#
  #    HOMESTAYSS
  #==================================#
  #    Get Homestays
    responseProductData:
      type: object
      properties:
        "id":
          type: number
          minLength: 1
        "nama":
          type: string
          minLength: 1
        "users_id":
          type: number
          minLength: 1
        "longitude":
          type: number
          minLength: 1
        "latitude":
          type: number
          minLength: 1
        "alamat":
          type: string
          minLength: 1
        "rating":
          type: number
          minLength: 1
        "url":
          type: string
          minLength: 1
  #==================================#
  #    ROOMS
  #==================================#
    responseBookingData:
      type: object
      properties:
        "id":
          type: number
          minLength: 1
        "nama_room":
          type: string
          minLength: 1
        "homestayid":
          type: number
          minLength: 1
        "total_penghuni":
          type: number
          minLength: 1
        "harga":
          type: number
          minLength: 1
        "deskrips":
          type: string
          minLength: 1
  #==================================#
  #    GLOBAL RESPONSE
  #==================================#
  #    Success
    successResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        }
      }
  #    Failed
    failedResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        }
      }
    
  #==================================#    
  #    PARAMETERS
  #==================================#
  # parameters:
  #   dataHomestays:
  #     name: "dataHomestays"
  #     in: query 

  # requestBodies:
  #   userData:
  #     content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/requestUserData'
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: Alta
  #               email:
  #                 type: string
  #                 example: alta@mail.com
  #               password:
  #                 type: string
  #                 example: inipassword
  #               address:
  #                 type: string
  #                 example: Jakarta

  responses:
    #==================================#
    #    RESPONSE FOR GENERAL REQUEST
    #==================================#
    responseSuccess:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Successful Operation
    responseFailed:
      description: register failed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Bad Request
    #==================================#
    #    RESPONSE REGISTER USER
    #==================================#
    registerSuccess:
      description: register success
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Register Success
    registerFailed:
      description: register failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Register Failed
    #==================================#
    #    RESPONSE LOGIN USER
    #==================================#
    loginSuccess:
      description: login success
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Login Success
              data:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySWQiOjExfQ.YQ47sxFkIfbDVyQ5o6ix38w4BYxnNOPG3F5isqkyyv8
    loginFailed:
      description: login failed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: fail
              message:
                type: string
                example: Login Failed
    #==================================#
    #    RESPONSE GET USER PROFILE
    #==================================#
    getUserProfileSuccess:
      description: success get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get User Profile
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: Alta
                  email:
                    type: string
                    example: alta@mail.com
                  address:
                    type: string
                    example: Surabaya
    getUserProfileFailed:
      description: fail to get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Fail to Get User Profile
    #==================================#
    #    RESPONSE EDIT USER PROFILE
    #==================================#
    editUserProfileSuccess:
      description: success change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Update Profile
    editUserProfileFailed:
      description: fail to change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Update Profile
    #==================================#
    #    RESPONSE EDIT USER PASSWORD
    #==================================#
    editUserPasswordSuccess:
      description: success change password
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Change Password
    editUserPasswordFailed:
      description: fail to change password
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Change Password
    #==================================#
    #    RESPONSE LOGOUT
    #==================================#
    logoutSuccess:
      description: success logout
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Logout Success
    logoutFailed:
      description: fail to logout
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Logout Failed

    ##user borrowed dan userlent belum


    #==================================#
    #    RESPONSE INPUT BOOK RATING
    #==================================#
    inputBookRatingSuccess:
      description: success give book rating
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Give Book Rating
    inputBookRatingFailed:
      description: fail to give book rating
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Give Book Rating
    #==================================#
    #    RESPONSE INPUT BOOK RATING
    #==================================#
    inputBorrowerRatingSuccess:
      description: success give borrower rating
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Give Borrower Rating
    inputBorrowerRatingFailed:
      description: fail to give Borrower rating
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Give Borrower Rating
    #==================================#
    #    RESPONSE INSERT BOOK
    #==================================#
    insertBookSuccess:
      description: success insert book
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Insert Book
    insertBookFailed:
      description: fail to insert book
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Insert Book
    #==================================#
    #    RESPONSE GET ALL BOOK
    #==================================#
    getAllBookSuccess:
      description: success get all books
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get All Book
              data:
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: Rich Dad Poor Dad
                    file_foto:
                      type: string
                      example: sdJksHJ12ks.jpg
                    rent_price:
                      type: integer
                      example: 500
                    address:
                      type: string
                      example: Depok
                    author:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        name:
                          type: string
                          example: Robert Kiyosaki
                    publisher:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: integer
                          example: Gramedia
                    category:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4
                        name:
                          type: string
                          example: Motivasi
                    is_available:
                      type: boolean
                      example: true
    getAllBookFailed:
      description: fail to get all book
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get All Book
    #==================================#
    #    RESPONSE GET BOOK BY ID
    #==================================#
    getBookByIdSuccess:
      description: success get book by ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get Book By ID
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: Rich Dad Poor Dad
                  file_foto:
                    type: string
                    example: sdJksHJ12ks.jpg
                  rent_price:
                    type: integer
                    example: 500
                  address:
                    type: string
                    example: Depok
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      name:
                        type: string
                        example: Robert Kiyosaki
                  publisher:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: integer
                        example: Gramedia
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 4
                      name:
                        type: string
                        example: Motivasi
                  is_available:
                    type: boolean
                    example: true
    getBookByIdFailed:
      description: fail to get book by ID
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get Book By ID
    #==================================#
    #    RESPONSE SEARCH BOOK
    #==================================#
    searchBookByKeywordSuccess:
      description: success search book
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Seach Book
              data:
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: Rich Dad Poor Dad
                    file_foto:
                      type: string
                      example: sdJksHJ12ks.jpg
                    rent_price:
                      type: integer
                      example: 500
                    address:
                      type: string
                      example: Depok
                    author:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        name:
                          type: string
                          example: Robert Kiyosaki
                    publisher:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: integer
                          example: Gramedia
                    category:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4
                        name:
                          type: string
                          example: Motivasi
                    is_available:
                      type: boolean
                      example: true
    searchBookByKeywordFailed:
      description: fail to search book
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Search Book
    #==================================#
    #    RESPONSE GET LIST CATEGORY
    #==================================#
    getListCategorySuccess:
      description: success get list category
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get List Category
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                    name:
                      type: string
                      example: Sejarah
    getListCategoryFailed:
      description: fail to get list category
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get List Category
    #==================================#
    #    RESPONSE GET LIST PUBLISHER
    #==================================#
    getListPublisherSuccess:
      description: success get list publisher
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get List Publisher
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                    name:
                      type: string
                      example: Gramedia
    getListPublisherFailed:
      description: fail to get list publisher
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get List Publisher
    #==================================#
    #    RESPONSE GET LIST AUTHOR
    #==================================#
    getListAuthorSuccess:
      description: success get list author
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get List Author
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: JK. Rowling
    getListAuthorFailed:
      description: fail to get list author
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get List Author
    #==================================#
    #    RESPONSE GET TRANSACTION
    #==================================#
    getTransactionSuccess:
      description: success get transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get Transaction
    getTransactionFailed:
      description: fail to get transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Get Transaction
    #==================================#
    #    RESPONSE CREATE TRANSACTION
    #==================================#
    createTransactionSuccess:
      description: success create transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Create Transaction
    createTransactionFailed:
      description: fail to create transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Create Transaction
    #==================================#
    #    DEFAULT RESPONSE
    #==================================#
    operationSuccess:
      description: operation success
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Operation Success
    operationFailed:
      description: operation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Operation Failed